# implement one tier by selecting vnet/subnet and delegation
# implement two tier by selecting vnet/subnet and delegation and frontend/api.
# implement three tier by using genAI openAI service.

apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: azure-k8-microservice
  title: Azure K8 Microservice
  description: |
    This template creates a new Azure Kubernetes Service (AKS) microservice.
    It deploys a microservice in an existing AKS cluster for given namespace. Allows to create multiple services in the same namespace.
  tags:
    - layer
    - workloads
    - azure
    - container
    - kubernetes
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Metadata
      definitions:
        secondaryRegion:
          title: Secondary Region
          type: string
          description: Select secondary region for the workload
          enum:
          - us-central1
          - us-east1
      # required:
      #   - mgName
      #   - subscription
      #   - appKey
      properties:
        mgName:
          title: Management Group
          type: string
          description: Select a management group for this tier
          ui:field: CspDataPicker
          ui:options:
            csp: azure
            dataType: orgunits
        subscription:
          title: Subscription
          type: string
          description: Subscription where this tier will be created
          ui:field: CspDataPicker
          ui:options:
            csp: azure
            dataType: accounts
            dependendsOnField: mgName
        appKey:
          title: App Code
          type: string
          description: 3 letter code that represents the application
          minLength: 3
          maxLength: 3
        layerKey:
          title: Layer Code
          type: string
          description: 3 letter code that represents the layer
          minLength: 3
          maxLength: 3
        appName:
          title: App Name
          type: string
          description: Enter name of this application (e.g. no spaces allowed. my-application-name)
          maxLength: 25
          pattern: ^[a-zA-Z0-9]+([-_.][a-zA-Z0-9]+){0,24}$
        primaryRegion:
          title: Primary Region
          type: string
          description: Select primary region for the workload
          enum:
          - us-central1
          - us-east1
        internetFacing:
          title: Internet Facing
          type: boolean
          description: Is this application internet facing?
          
    - title: Workload Details
      # required:
      #   - clusterId
      #   - repoName
      properties:
        clusterId:
          title: AKS Cluster
          type: string
          description: Select an AKS cluster
          ui:field: CspDataPicker
          ui:options:
            csp: azure
            dataType: k8cluster
            dependendsOnField: subscription
        namespace:
          title: Namespace
          type: string
          description: Enter namespace for the workload
          maxLength: 25
          pattern: ^[a-zA-Z0-9]+([-_.][a-zA-Z0-9]+){0,24}$
        services:
          title: Services
          type: array
          items:
            type: object
            properties:
              name:
                title: Service Name
                type: string
                description: Enter name of the service (e.g. no spaces allowed. my-service-name)
                maxLength: 25
                pattern: ^[a-zA-Z0-9]+([-_.][a-zA-Z0-9]+){0,24}$
              serviceKey:
                title: Service Code
                type: string
                description: Enter name of the service (e.g. no spaces allowed. my-service-name)
                maxLength: 25
                pattern: ^[a-zA-Z0-9]{0,24}$
              type:
                title: Layer Type
                type: string
                description: Select a layer type for this application
                enum:
                - web
                - api
              language:
                title: Language
                type: string
                description: Select a language for this tier
                enum:
                - java
                - nodejs
                - python
                - dotnet
                - dotnetcore
                - N/A
              port:
                title: Port
                type: integer
                description: Enter port for the service
                pattern: ^[0-9]{1,5}$
              replicaCount:
                title: Replica Count
                type: integer
                description: Enter number of replicas for the service
                pattern: ^[0-9]{1,5}$
              configData:
                title: Config Data
                type: array
                items:
                  type: object
                  properties:
                    key:
                      title: Key
                      type: string
                      description: Enter key for the config data
                    value:
                      title: Value
                      type: string
                      description: Enter value for the config data
              secretData:
                title: Secret Data
                type: array
                items:
                  type: object
                  properties:
                    key:
                      title: Key
                      type: string
                      description: Enter key for the secret data
                    value:
                      title: Value
                      type: string
                      description: Enter value for the secret data

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    - id: fetch-app-service-repo
      name: Fetch Template Repository
      action: fetch:template #will fetch the this template. 
      input:
        #url: https://github.com/nara/app-k8s-workload-template.git
        url: ./app-k8s-workload-template
        values:
          org_email_domain: smartfigarage.com #TODO read from config
          line_of_business_key: lob #${{ parameters.domain }} TODO
          team_key: ${{ parameters.teamCode }}
          org_key: org  #${{ parameters.environment }} TODO
          app_key: ${{ parameters.appKey }}
          appName: ${{ parameters.appName }}
          primaryRegion: ${{ parameters.primaryRegion }}
          secondaryRegion: ${{ parameters.secondaryRegion }}
          mgName: ${{ parameters.mgName }}
          subscription: ${{ parameters.subscription }}
          layerKey: ${{ parameters.layerKey }}
          clusterId: ${{ parameters.clusterId }}
          namespace: ${{ parameters.namespace }}
          services: ${{ parameters.services }}

    - id: generate-target-files
      name: Generate Target Files
      action: generate:target:repo
      input:
        allParameters: ${{ parameters }}
        services: ${{ parameters.services }}
        perServiceTemplateFiles:
        - charts/service.yaml.njk

    - id: debug
      name: Debug
      action: debug:log
      input:
        listWorkspace: true

    - id: displayfile
      name: Display File
      action: debug:displayFile
      input:
        filePath: ./docker-compose.yml

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish_workload'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
