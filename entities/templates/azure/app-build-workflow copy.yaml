# implement one tier by selecting vnet/subnet and delegation
# implement two tier by selecting vnet/subnet and delegation and frontend/api.
# implement three tier by using genAI openAI service.

apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: app-build-workflow
  title: Azure Application Builder Workflow
  description: Provision new application by composing of layers using terraform and pipelines
  tags:
    - recommended
    - workloads
    - azure
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Metadata
      definitions:
        secondaryRegion:
          title: Secondary Region
          type: string
          description: Select secondary region for the workload
          enum:
          - us-central1
          - us-east1
      # required:
      #   - domain
      #   - system
      #   - teamCode
      #   - appKey
      properties:
        domain:
          title: Domain
          type: string
          description: Select a domain
          ui:autofocus: true
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - Domain
        system:
          title: System
          type: string
          description: Select a System
          default: system
          ui:autofocus: true
          ui:field: DependantEntityPicker
          ui:options:
            dependendsOnField: domain
            allowedKind: System
        teamCode:
          title: Team Code
          type: string
          description: 3 letter code that represents your team
          minLength: 3
          maxLength: 3
          default: tea
        appKey:
          title: App Code
          type: string
          description: 3 letter code that represents the application
          minLength: 3
          maxLength: 3
          default: app
        appName:
          title: App Name
          type: string
          description: Enter name of this application (e.g. no spaces allowed. my-application-name)
          maxLength: 25
          pattern: ^[a-zA-Z0-9]+([-_.][a-zA-Z0-9]+){0,24}$
          default: my-application-name
          
    - title: Layers
      # required:
      #   - tierType
      #   - language
      properties:
        layers:
          title: Layers
          type: array
          minItems: 1
          items:
            type: object
            properties:
              layerType:
                title: Layer Type
                type: string
                description: Select a layer type for this application
                enum:
                - web
                - app
                - api
                - db
              layerCode:
                title: Layer Code
                type: string
                description: Enter a 3 letter unique code that represents the layer
                minLength: 3
                maxLength: 3
              hostingType:
                title: Hosting Type
                type: string
                description: Select how this tier will be hosted
                enum:
                - static
                - serverless
                - container
                - vm
                - db
                enumNames:
                - Static
                - Serverless (Functions, Web Apps, App Service Fabric)
                - Container (Kubernetes, App Service for Containers, Container Instances)
                - VM
                - DB
            dependencies:
              hostingType:
                oneOf:
                - properties:
                    hostingType:
                      const: static
                - properties:
                    hostingType:
                      const: container
                    service:
                      title: Service
                      type: string
                      description: Select a service
                      enum:
                      - app_service
                      - container_apps
                      - container_instance
                      - aks
                      enumNames:
                      - App Service
                      - Container Apps
                      - Container Instance
                      - AKS
                    containerTemplate:
                      title: Template Name
                      type: string
                      readOnly: true
                      default: azure-container-layer
                - properties:
                    hostingType:
                      const: serverless
                    service:
                      title: Service
                      type: string
                      description: Select a service
                      enum:
                      - agw_and_functions
                      - app_service
                      enumNames:
                      - API Gateway + Functions
                      - App Service
                    serverlessTemplate:
                      title: Template Name
                      type: string
                      readOnly: true
                      default: azure-serverless-layer

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    - id: first-tier-fetch-serverless-repo
      name: First Tier - Fetch Serverless template
      action: fetch:template
      if: ${{ parameters.service == 'serverless' || (parameters.service == 'app_service' }}
      input:
        #url: https://github.com/nara/azure-app-layer-serverless-template.git
        url: ./azure-app-layer-serverless-template
        values:
          app_key: ${{ parameters.appKey }}
          environment: ${{ parameters.environment }}
          org_email_domain: smartfigarage.com #TODO read from config
          line_of_business_key: lob #${{ parameters.domain }} TODO
          team_key: ${{ parameters.teamCode }}
          org_key: org  #${{ parameters.environment }} TODO
          hosting_type: ${{ parameters.hostingType }}
          language: ${{ parameters.language }}
          languageVersion: ${{ parameters.languageVersion }}
          service: ${{ parameters.service }}
          name: ${{ parameters.appServiceName }}
          sku_name: ${{ parameters.skuName }}
          primary_location: ${{ parameters.primaryRegion }}
          frontdoor_sku_name: ${{ parameters.frontdoorSkuName }}
          enable_vnet_integration: ${{ parameters.enableVnetIntegration }}
          vnet_integration_id: ${{ parameters.vnetInteg }}
          vnet_integration_subnet_id: ${{ parameters.subnetInteg }}
          security_level: ${{ parameters.securityLevel }}
          private_link_vnet_id: ${{ parameters.vnetPrivateLink }}
          private_link_subnet_id: ${{ parameters.subnetPrivateLink }}

    - id: publish_first_tier_serverless
      name: Publish First Tier Serverless Repo
      action: publish:gitlab
      if: ${{ parameters.service == 'serverless' || (parameters.service == 'app_service' }}
      input:
        allowedHosts: ['gitlab.com']
        description: Instance of azure-app-layer-serverless-template for application Key ${{ parameters.appKey }}
        repoUrl: gitlab.com?owner=robust4&repo=azure-svl-${{ parameters.appKey }}-${{ parameters.tierType }}

    # This step publishes the contents of the working directory to GitHub.
    - id: clean_workspace
      name: Clean Workspace
      action: clean:workspace
      input:
        emptyDir: true

    - id: register
      name: Register Application
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish_workload'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
        appKey: ${{ parameters.appKey }}
        appName: ${{ parameters.appName }}
        appDescription: ${{ parameters.appDescription }}
        gitlabInfraGroupName: robust4 #todo make it input
        gitlabInfraProjectName: ${{ parameters.appKey }}-gcp-workload-cr-cs

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish_workload'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
